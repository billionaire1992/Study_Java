★ Method (메소드)
	- 클래스가 가지고 있는 행위 정보 (동작, 기능)를 표현한는 것 → 함수 (Function)
	- 동작을 만들어 놓고 필요할 때 사용하기 위해 호출 
	- 캡슐화의 원칙 : 클래스 안에 메소드를 구현 , 하나의 클래스 안에는 여러개의 메소드가 존재 할 수 있
	
	※클래스 (*.java → *.class) 안에는 무엇이 들어가는가 ?
	- main () : 자바는 반드시 main() 메소드에서 프로그램이 동작(실행)된다 → main class
	- 상태정보 : 변수 (field) 										      → DTO Class , VO class ,Java Beans
	- 행위정보 : 메소드(Method 동작, 기능)								  → DAO Class	

★ 메소드의 형식 ( 메소드를 만드는 방법) 
 ①	     ②		③  	④	(		  ⑤   	 	 )			
public static void getSum(int num1 , int num2){		▶ 프로토타입 : 선언부
	~~ 메소드의 동작 구현(코드가 만들어진다) ~~;	▶ 바디 (body): 구현부
		⑥ return;
}

① 접근 제어자 : public (접근허용) ↔ private(정보은닉 : 내부만 접근허용 ) , protected, default
② 한정자 :  static(자동으로 메모리에 생성 ), 생략(객체를 생성하여 접근) , final(재정의가 불가)
③ 리턴 타입 : (반환값) : 메소드가 동작후에 최종적으로 만들어내는 결과값의 타입
	-리턴을 하지않는 경우 : void 					▶ 메소드 내 (body)에  return 키워드 X
	-리턴을 하는 경우 : 리턴되는 데이터의 타입 		▶ 메소드 내 (body)에 return 키워드 O 
④ 메소드 이름 (): 작성규칙 있음 ; 소문자로 시작, 키워드는 사용불가, 의미있게 작성,  변수명 작성규칙과 동일 
⑤ 매개변수 리스트 
	- 메소드가 동작하기 위해 외부로부터 입력 (전달)되는 데이터 목록 
	- 목록의 개수가 여러개일 경우 comma(,) 로 구분 
	- 인수 , 인자, Parameter 
⑥ return 키워드 
	- 메소드가 동작을 완료한 후 , 결과값을 호출한 쪽으로 되돌리는 (넘기는) 키워드 
	- return 키워드가 있을 경우에는 반드시 리턴타입 변경되어야 한다(void 키워드 사용할 수 없음)
	- return 키워드를 만나게 되면 return 문 아래의 문장은 수행되지 않는다. 
	
★ 실인수(호출)와 가인수(정의)간의 매개변수를 전달하는 규칙 	: Parameter Passing Rule
	- 실인수와 가인수의 매개변수 개수가 같아야한다.
	- 실인수와 가인수의 매개변수 타입이 같아야한다.
	- 실인수와 가인수의 매개변수 이름은 동일해도 되고, 그렇지 않아도 된다.
	
★ 메소드 오버로딩(Method Overloading)
	- 클래스 안에 같은 이름을 가지고 있는 메소드를 여러개 선언(정의)→ 메소드의 중복정의
	- 메소드의 이름이 같아야한다.  
	- 매개변수의 개수가 달라야한다
	- 매개변수의 개수가 같을 경우에는 매개변수의 타입 또는 순서가 달라야한다.
		예) public static void getSum(int , int ) {~~~}				
			public static void getSum(int , int, int ) {~~~}
			public static void getSum(double, double) {~~~}
			public static void getSum(int , double ) {~~~}				
			public static void getSum(double , int ) {~~~}				
	
	
	
	
	










